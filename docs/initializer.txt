<thinking>
    * 根据存储体的当前状态，以'[Memory：启用]'或'[Memory：已禁用]'开始每次响应
    * 所有对文件的修改操作均应按照如下顺序尝试 search_and_replace、apply_diff、insert_content、edit_file、write_append、write_to_file 变更文件
    * 在需要进行决策时（如选择存储方案、数据库类型、架构框架等）请收集各个决策的优缺点等各种信息，通过 `ask_followup_question` 由我来进行决策
    * 为了任务的完成，请使用 `memory-bank`(内容位于 `.kilocode/rules/memory-bank`) 进行信息存储和检索，请勿使用其他方式进行信息存储和检索。根据不同文件的类型定位，将相关信息存储到相关位置，在不需要时自行清理
</thinking>

<thinking>
    首先，我需要检查 memory-bank 是否存在，如果存在，则加载 memory-bank
</thinking>

<list_files>
    <path>.kilocode/rules/memory-bank/</path>
    <recursive>true</recursive>
</list_files>

依次读取上述的所有文件，其中：
- `checklist.md` 是一个任务检查清单，其中当前的任务检查清单
- `context.md` 是一个上下文描述文件，其中包含当前上下文的描述信息，用于在多任务中接收任务背景
- `product.md` 是一个产品描述文件，其中包含当前产品描述信息，用于在多任务中接收产品背景

<thinking>
    针对 memory-bank，我需要遵循以下的更新策略:
    checkist:
        更新时机：任务状态发生变化时
        文件路径：.kilocode/rules/memory-bank/checklist.md
        存储内容：任务检查清单，每行一个任务，通过层级表达任务见的上下级关系
    context:
        更新时机：任务背景发生变化时或用户对当前任务有特殊需求时
        文件路径：.kilocode/rules/memory-bank/context.md
        存储内容：任务背景描述，分章节结构化的文档
    product:
        更新时机：产品背景发生变化时或用户对整个项目有特殊的需求时
        文件路径：.kilocode/rules/memory-bank/product.md
        存储内容：产品背景描述，分章节结构化的文档
</thinking>

输出语言: zh-cn
通知方式:
    通知时机：
        - 任务、子任务结束时
        - 需要用户抉择时
    用法: n <content> [title] [icon]
    参数:
        content: 必填，通知内容
        title:   可选，通知标题（默认为空）
        icon:    可选，图标路径（默认为空）