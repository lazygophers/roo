services:
  lazyai-studio:
    image: lazygophers/lazyai-studio:latest
    container_name: lazyai-studio
    ports:
      - "8000:8000"
    volumes:
      - lazyai_data:/app/data
      - lazyai_logs:/app/logs
    environment:
      # Python 运行时环境变量
      - PYTHONUNBUFFERED=1
      - PYTHONOPTIMIZE=2
      - PYTHONDONTWRITEBYTECODE=1

      # LazyAI Studio 应用环境变量
      - ENVIRONMENT=${ENVIRONMENT:-local}       # 运行环境: local 或 remote
      - DEBUG=${DEBUG:-false}                   # 调试模式
      - LOG_LEVEL=${LOG_LEVEL:-INFO}           # 日志级别: DEBUG, INFO, WARNING, ERROR
      - HOST=${HOST:-0.0.0.0}                  # 绑定主机
      - PORT=${PORT:-8000}                     # 端口号
      - CORS_ORIGINS=${CORS_ORIGINS:-*}        # CORS 允许的来源，多个用逗号分隔
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}  # 是否允许携带凭证
      - CACHE_TTL=${CACHE_TTL:-3600}           # 缓存过期时间（秒）
      - DATABASE_PATH=${DATABASE_PATH:-/app/data/lazyai.db}  # 数据库文件路径
    restart: unless-stopped
    # 极低资源限制配置
    deploy:
      resources:
        limits:
          cpus: '0.25'     # 限制CPU使用率25%
          memory: 128M     # 限制内存使用128MB
        reservations:
          cpus: '0.05'     # 保留CPU使用率5%
          memory: 64M      # 保留内存64MB
    # 最小化健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 120s     # 2分钟检查一次
      timeout: 3s
      retries: 1
      start_period: 60s
    # 安全和性能优化
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=16m  # 最小临时文件系统16MB
    # 日志配置（减少日志开销）
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

volumes:
  lazyai_data:
    driver: local
  lazyai_logs:
    driver: local