name: Docker Build and Release

on:
  push:
    branches:
      - master
      - luoxin
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 测试作业
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Run backend tests
        run: uv run pytest tests/ -v --tb=short

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage

  # Docker构建和发布作业
  docker:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 发布作业 - 仅在推送到主分支时运行
  release:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/luoxin')
    needs: [test, docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          latest_tag="${{ steps.latest_tag.outputs.tag }}"
          # 移除 'v' 前缀
          version=${latest_tag#v}
          # 分割版本号
          IFS='.' read -r major minor patch <<< "$version"
          # 增加补丁版本号
          patch=$((patch + 1))
          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "新版本: $new_version"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_version }}
          release_name: LazyAI Studio ${{ steps.bump_version.outputs.new_version }}
          body: |
            ## 🚀 LazyAI Studio ${{ steps.bump_version.outputs.new_version }}

            ### 📦 Docker 镜像
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.bump_version.outputs.new_version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```

            ### 🏃 快速启动
            ```bash
            docker run -d -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```

            ### 📋 更新内容
            - 🐳 Docker 镜像自动构建和发布
            - ✅ 完整的前后端集成
            - 🔧 CI/CD 自动化部署

            ---
            📋 **LazyGophers 出品** - 让 AI 替你思考，让工具替你工作！
          draft: false
          prerelease: false

  # 部署通知作业
  notify:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/luoxin')
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Success Notification
        run: |
          echo "🎉 LazyAI Studio 已成功构建并发布！"
          echo "📦 Docker 镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔗 发布页面: ${{ github.server_url }}/${{ github.repository }}/releases"