name: Docker Build and Push (Master + Dev)

on:
  push:
    branches:
      - master
      - dev
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 检测变更文件，决定是否需要构建
  detect-changes:
    runs-on: lazy
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      resources-changed: ${{ steps.changes.outputs.resources }}
      should-build: ${{ steps.should-build.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'frontend/package*.json'
              - 'frontend/pnpm-lock.yaml'
            backend:
              - 'app/**'
              - 'pyproject.toml'
              - 'uv.lock'
            docker:
              - 'Dockerfile'
              - 'docker-compose*.yml'
              - '.dockerignore'
              - '.github/workflows/docker-build.yml'
            resources:
              - 'resources/**'

      - name: Determine if build is needed
        id: should-build
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ contains(github.ref, 'refs/tags/') }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "🏷️ Tag推送，强制构建"
          elif [[ "${{ steps.changes.outputs.frontend }}" == "true" || "${{ steps.changes.outputs.backend }}" == "true" || "${{ steps.changes.outputs.docker }}" == "true" || "${{ steps.changes.outputs.resources }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "📦 检测到相关文件变更，需要构建"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "⏭️ 无相关文件变更，跳过构建"
          fi

  # 优化的构建和推送
  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-build == 'true'
    runs-on: lazy
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Docker cache
        id: docker-cache
        uses: ./.github/actions/docker-cache
        with:
          cache-key: docker-build-${{ github.ref_name }}-${{ hashFiles('**/Dockerfile', '**/package*.json', '**/pnpm-lock.yaml', '**/pyproject.toml', '**/uv.lock') }}
          registry: ${{ env.REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}

      - name: Determine build platforms
        id: platforms
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
            echo "build_type=multi-arch" >> $GITHUB_OUTPUT
            echo "🏗️ Master/Tag branch detected - building for amd64 + arm64"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "build_type=single-arch" >> $GITHUB_OUTPUT
            echo "🚀 Dev branch detected - building for amd64 only"
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
            echo "build_type=single-arch" >> $GITHUB_OUTPUT
            echo "🔧 Other branch detected - building for amd64 only"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ steps.docker-cache.outputs.cache-from }}
          cache-to: ${{ steps.docker-cache.outputs.cache-to }}
          provenance: false
          sbom: false

      - name: Generate build summary
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ steps.platforms.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ steps.platforms.outputs.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag Strategy:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Master/Tags:** Multi-arch (amd64 + arm64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev:** Single-arch (amd64 only)" >> $GITHUB_STEP_SUMMARY
          echo "- **Other:** Single-arch (amd64 only)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changes detected:**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.detect-changes.outputs.frontend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.detect-changes.outputs.backend-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: ${{ needs.detect-changes.outputs.docker-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "- Resources: ${{ needs.detect-changes.outputs.resources-changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚡ **Build optimizations:**" >> $GITHUB_STEP_SUMMARY
          echo "- Smart change detection" >> $GITHUB_STEP_SUMMARY
          echo "- Dynamic platform selection" >> $GITHUB_STEP_SUMMARY
          echo "- Disabled SBOM/Provenance for speed" >> $GITHUB_STEP_SUMMARY
          echo "- Intelligent cache strategy: ${{ steps.docker-cache.outputs.runner-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cache configuration: ${{ steps.docker-cache.outputs.cache-from }}" >> $GITHUB_STEP_SUMMARY

  # 仅在文档或非构建文件变更时运行的快速作业
  skip-notification:
    needs: detect-changes
    if: needs.detect-changes.outputs.should-build == 'false'
    runs-on: lazy
    permissions:
      contents: read
    steps:
      - name: Skip build notification
        run: |
          echo "## Build Skipped ⏭️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "构建已跳过，因为没有检测到相关文件变更。" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**检查的路径:**" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`frontend/**\`" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`app/**\`, \`pyproject.toml\`, \`uv.lock\`" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: \`Dockerfile\`, \`docker-compose*.yml\`, \`.github/workflows/docker-build.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "- Resources: \`resources/**\`" >> $GITHUB_STEP_SUMMARY
