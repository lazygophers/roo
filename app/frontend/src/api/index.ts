// app/frontend/src/api/index.ts
// Generated by code-react from app/api/routes.py

// --- Request and Response Models (TypeScript Interfaces) ---

export interface HelloRequest {
  message?: string;
}

export interface ModelRequest {
  slug?: string;
}

export interface ConfigRequest {
  userId?: string; // Original: user_id (Python uses snake_case, JS/TS generally camelCase)
}

export interface ConfigIdRequest {
  configId: string; // Original: config_id
}

export interface UpdateConfigRequest {
  configData: Record<string, any>; // Original: config_data
}

/**
 * 命令执行请求模型
 */
export interface CommandRequest {
  /**
   * 要执行的命令字符串
   */
  command: string;
  /**
   * 工作目录路径
   */
  workingDir?: string; // Original: working_dir
}

/**
 * 角色信息响应模型
 */
export interface RoleResponse {
  /**
   * 角色名称
   */
  name: string;
  /**
   * 角色标题
   */
  title: string;
  /**
   * 角色描述
   */
  description: string;
  /**
   * 角色分类
   */
  category: string;
  /**
   * 角色特质列表
   */
  traits: string[];
  /**
   * 角色特性字典
   */
  features: Record<string, any>;
  /**
   * 角色完整内容
   */
  content: string;
}

/**
 * 命令执行请求模型
 */
export interface CommandExecuteRequest {
  /**
   * 要执行的命令字符串
   */
  command: string;
  /**
   * 工作目录路径
   */
  workingDir?: string; // Original: working_dir
  /**
   * 用户ID，用于权限控制
   */
  userId?: string; // Original: user_id
}

/**
 * 角色请求模型
 */
export interface RoleRequest {
  /**
   * 角色名称
   */
  roleName: string; // Original: role_name
}

// --- API Utility Functions ---

const API_BASE_URL = "/api"; // Adjust this if your API is served from a different path

interface ApiResponse<T> {
  data?: T;
  success: boolean;
  message?: string;
  config_id?: string; // For save_configuration
  // Add other common response fields here
}

/**
 * 通用的API请求函数
 * @param path API路径
 * @param method HTTP方法 (POST, GET, etc.)
 * @param body 请求体数据
 * @param headers 请求头
 * @returns Promise<T>
 */
export async function fetchApi<T>(
          path: string,
          method: string = "POST",
          body?: any,
          headers: Record<string, string> = { "Content-Type": "application/json" }
): Promise<T> {
  const url = `${API_BASE_URL}${path}`;
  const options: RequestInit = {
    method,
    headers,
  };

  if (body !== undefined) {
    // Handle FormData for file uploads specifically
    if (body instanceof FormData) {
      options.body = body;
      // When using FormData, fetch automatically sets Content-Type to multipart/form-data
      // and includes the boundary. Do not manually set it to application/json.
      delete options.headers!['Content-Type'];
    } else {
      options.body = JSON.stringify(body);
    }
  }

  try {
    const response = await fetch(url, options);

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.detail || `API Error: ${response.status} ${response.statusText}`);
    }

    // Handle StreamingResponse and file downloads
    if (response.headers.get("content-type")?.includes("application/x-yaml") ||
        (response.headers.get("content-type")?.includes("application/json") && response.headers.get("content-disposition")?.includes("attachment"))) {
      return response.blob() as Promise<T>; // Return Blob for file downloads
    }
    
    // For other responses, try to parse JSON
    return (await response.json()) as T;

  } catch (error: any) {
    console.error(`Error calling ${method} ${url}:`, error);
    throw error;
  }
}

// --- API Endpoints ---

export const api = {
  /**
   * 简单的问候端点，支持前端调用
   * @param request 请求体：{ message?: string }
   * @returns Promise<{ message: string, status: string }>
   */
  hello: async (request: HelloRequest): Promise<{ message: string, status: string }> => {
    return fetchApi("/hello", "POST", request);
  },

  /**
   * 获取models目录及其子目录的所有文件信息（排除customInstructions字段）
   * @returns Promise<Array<Record<string, any>>>
   */
  getModels: async (): Promise<Array<Record<string, any>>> => {
    return fetchApi("/models", "POST");
  },

  /**
   * 根据slug获取models目录下具体文件的完整内容
   * @param request 请求体：{ slug?: string }
   * @returns Promise<Record<string, any>>
   */
  getModelBySlug: async (request: ModelRequest): Promise<Record<string, any>> => {
    return fetchApi("/models/get", "POST", request);
  },

  /**
   * 获取hooks/before.md文件的frontmatter元数据和内容
   * @returns Promise<Record<string, any>>
   */
  getHooksBefore: async (): Promise<Record<string, any>> => {
    return fetchApi("/hooks/before", "POST");
  },

  /**
   * 获取hooks/after.md文件的frontmatter元数据和内容
   * @returns Promise<Record<string, any>>
   */
  getHooksAfter: async (): Promise<Record<string, any>> => {
    return fetchApi("/hooks/after", "POST");
  },

  /**
   * 根据slug获取rules目录下的所有文件内容和frontmatter元数据
   * @param request 请求体：{ slug?: string }
   * @returns Promise<Record<string, Record<string, any>>>
   */
  getRulesBySlug: async (request: ModelRequest): Promise<Record<string, Record<string, any>>> => {
    return fetchApi("/rules/get", "POST", request);
  },

  /**
   * 获取commands目录下的所有文件内容和frontmatter元数据
   * @returns Promise<Record<string, Record<string, any>>>
   */
  getCommands: async (): Promise<Record<string, Record<string, any>>> => {
    return fetchApi("/commands", "POST");
  },

  /**
   * 获取roles目录下的所有文件内容和frontmatter元数据
   * @returns Promise<Record<string, Record<string, any>>>
   */
  getRoles: async (): Promise<Record<string, Record<string, any>>> => {
    return fetchApi("/roles", "POST");
  },

  /**
   * 保存配置到数据库
   * @param configData 请求体：{ [key: string]: any }
   * @returns Promise<ApiResponse<any>>
   */
  saveConfiguration: async (configData: Record<string, any>): Promise<ApiResponse<any>> => {
    // Note: The FastAPI endpoint expects a direct dict body, not a Pydantic model for this specific endpoint,
    // so we pass configData directly.
    return fetchApi("/configurations", "POST", configData);
  },

  /**
   * 获取所有配置或用户专属配置
   * @param request 请求体：{ userId?: string }
   * @returns Promise<Array<Record<string, any>>>
   */
  getConfigurations: async (request: ConfigRequest): Promise<Array<Record<string, any>>> => {
    return fetchApi("/configurations", "POST", request);
  },

  /**
   * 根据ID获取单个配置
   * @param request 请求体：{ configId: string }
   * @returns Promise<Record<string, any>>
   */
  getConfiguration: async (request: ConfigIdRequest): Promise<Record<string, any>> => {
    return fetchApi("/configurations/get", "POST", request);
  },

  /**
   * 更新配置
   * @param request 请求体：{ configData: Record<string, any> }
   * @returns Promise<ApiResponse<any>>
   */
  updateConfiguration: async (request: UpdateConfigRequest): Promise<ApiResponse<any>> => {
    return fetchApi("/configurations/update", "POST", request);
  },

  /**
   * 删除配置
   * @param request 请求体：{ configId: string }
   * @returns Promise<ApiResponse<any>>
   */
  deleteConfiguration: async (request: ConfigIdRequest): Promise<ApiResponse<any>> => {
    return fetchApi("/configurations/delete", "POST", request);
  },

  /**
   * 导出配置为 YAML 文件
   * @param request 请求体：{ configId: string }
   * @returns Promise<Blob> - 表示一个二进制文件
   */
  exportConfigurationYaml: async (request: ConfigIdRequest): Promise<Blob> => {
    return fetchApi("/configurations/export/yaml", "POST", request, { "Content-Type": "application/json" });
  },

  /**
   * 导出配置为 JSON 文件
   * @param request 请求体：{ configId: string }
   * @returns Promise<Blob> - 表示一个二进制文件
   */
  exportConfigurationJson: async (request: ConfigIdRequest): Promise<Blob> => {
    return fetchApi("/configurations/export/json", "POST", request, { "Content-Type": "application/json" });
  },

  /**
   * 从YAML文件导入配置
   * @param file 上传的文件
   * @param userId 可选的用户ID
   * @returns Promise<ApiResponse<any>>
   */
  importConfigurationYaml: async (file: File, userId?: string): Promise<ApiResponse<any>> => {
    const formData = new FormData();
    formData.append('file', file);
    if (userId) {
      formData.append('user_id', userId); // FastAPI expects snake_case for form fields
    }
    return fetchApi("/configurations/import/yaml", "POST", formData);
  },

  /**
   * 从JSON文件导入配置
   * @param file 上传的文件
   * @param userId 可选的用户ID
   * @returns Promise<ApiResponse<any>>
   */
  importConfigurationJson: async (file: File, userId?: string): Promise<ApiResponse<any>> => {
    const formData = new FormData();
    formData.append('file', file);
    if (userId) {
      formData.append('user_id', userId); // FastAPI expects snake_case for form fields
    }
    return fetchApi("/configurations/import/json", "POST", formData);
  },

  /**
   * 执行系统命令并返回输出结果
   * @param request 请求体：CommandExecuteRequest
   * @returns Promise<Record<string, any>>
   */
  executeCommand: async (request: CommandExecuteRequest): Promise<Record<string, any>> => {
    return fetchApi("/commands/execute", "POST", request);
  },

  /**
   * 获取指定角色的详细信息
   * @param request 请求体：RoleRequest
   * @returns Promise<RoleResponse>
   */
  getRole: async (request: RoleRequest): Promise<RoleResponse> => {
    return fetchApi("/roles/get", "POST", request);
  },
};